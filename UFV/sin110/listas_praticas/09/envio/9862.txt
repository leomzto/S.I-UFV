Aula Prática 9

Nome: Leonardo Padovani Manzato
Matricula: 9862

Ex1: 

==============

#include <stdio.h>
#include <stdlib.h>

int main(void)
{
  int l, c, i, j;
  float **m;

  printf("Digite o número de l: ");
  scanf("%d", &l);
  printf("Digite o número de c: ");
  scanf("%d", &c);

  m = (float **)malloc(l * sizeof(float *));
  for (i = 0; i < l; i++)
    m[i] = (float *)malloc(c * sizeof(float));

  if (m == NULL)
  {
    printf("Erro ao alocar memória para a m.\n");
    exit(1);
  }
 
  for (i = 0; i < l; i++)
  {
    for (j = 0; j < c; j++)
    {
      printf("Digite o valor para [%d][%d]: ", i, j);
      scanf("%f", &m[i][j]);
    }
  }

  printf("\nMatriz:\n");
  for (i = 0; i < l; i++)
  {
    for (j = 0; j < c; j++)
      printf("%.2f ", m[i][j]);
    printf("\n");
  }

  for (i = 0; i < l; i++)
    free(m[i]);
  free(m);

  return 0;

}

==============

Ex2: 

==============

#include <stdio.h>
#include <stdlib.h>

int main(void)
{
  int N, M, i, j, k, maior, l = 0, c = 0;
  printf("Digite o número de linhas: ");
  scanf("%d", &N);
  printf("Digite o número de colunas: ");
  scanf("%d", &M);
  int **mat = (int **)malloc(N * sizeof(int *));
  for(i = 0; i < N; i++)
    mat[i] = (int *)malloc(M * sizeof(int));

  if (mat == NULL)
  {
    printf("Erro ao alocar memória para a matriz.\n");
    exit(1);
  }
  for (i = 0; i < N; i++)
  {
    for (j = 0; j < M; j++)
    {
      printf("Digite o valor para [%d][%d]: ", i, j);
      scanf("%d", &mat[i][j]);
    }
  }

for (k = 0; k < 3; k++)
{
  maior = mat[0][0];
  for (i = 0; i < N; i++)
  {
    for (j = 0; j < M; j++)
    {
      if (mat[i][j] > maior)
      {
        maior = mat[i][j];
        l = i;
        c = j;
      }
    }
  }
  printf("%d maior valor %d encontrado em [%d][%d]\n",k+1 , maior, l, c);
  mat[l][c] = 0;
}

for (i = 1; i < N; i++)
  free(mat[i]);
free(mat);
  return 0;
}


==============

Ex3: 

==============

#include <stdio.h>
#include <stdlib.h>

int main(void)
{
  int N, M, i, j;
  printf("Digite o número de linhas: ");
  scanf("%d", &N);
  printf("Digite o número de colunas: ");
  scanf("%d", &M);
  int **mat = (int **)malloc(N * sizeof(int *));
  for (i = 0; i < N; i++)
    mat[i] = (int *)malloc(M * sizeof(int));

  if (mat == NULL)
  {
    printf("Erro ao alocar memória para a matriz.\n");
    exit(1);
  }

  for (i = 0; i < N; i++)
  {
    for (j = 0; j < M; j++)
    {
      printf("Digite o valor para [%d][%d]: ", i, j);
      scanf("%d", &mat[i][j]);
    }
  }
  printf("\nMatriz:\n");
  for (i = 0; i < N; i++)
  {
    for (j = 0; j < M; j++)
      printf("%d ", mat[i][j]);
    printf("\n");
  }

  printf("Matiz transposta:\n");
  for (j = 0; j < M; j++)
  {
    for (i = 0; i < N; i++)
      printf("%d ", mat[i][j]);
    printf("\n");
  }
  
  for (i = 0; i < N; i++)
    free(mat[i]);
  free(mat);

  return 0;
}

==============

Ex4: 

==============

#include <stdio.h>
#include <stdlib.h>

int main(void)
{
  int cont = 0;
  int i;
  int tamanho = 10;
  int numero;
  int *vetor = malloc(tamanho * sizeof(int));
  if (vetor == NULL)
  {
    printf("Falha ao alocar memória.\n");
    exit(1);
  }

  do
  {
    printf("Digite um número inteiro (0 para sair): ");
    scanf("%d", &numero);

    if (numero == 0)
      break;

    if (cont == tamanho)
    {
      int *novo_vetor = malloc((tamanho + 10) * sizeof(int));
      if (novo_vetor == NULL)
      {
        printf("Falha ao alocar memória.\n");
        free(vetor);
        exit(1);
      }
      for (i = 0; i < cont; i++)
        novo_vetor[i] = vetor[i];

      free(vetor);
      vetor = novo_vetor;
      tamanho += 10;
    }

    vetor[cont] = numero;
    cont++;
    } while (1);

printf("Números digitados:\n");
for (i = 0; i < cont; i++)
    printf("%d ", vetor[i]);
printf("\n");

  free(vetor);

  return 0;
} 

==============

Ex5: 

==============

#include <stdio.h>
#include <stdlib.h>

typedef struct
{
  char nome[31];
  int codigo;
  float preco;
} sProduto;

int main (void)
{
  void *vetor = malloc(1024);
  if (vetor == NULL)
  {
    printf("Falha ao alocar memória.\n");
    exit(1);
  }

  int i;  
  int **matriz = malloc(10 * sizeof(int *));
  if (matriz == NULL)
  {
    printf("Falha ao alocar memória.\n");
    free(vetor);
    exit(1);
  }
  for (i = 0; i < 10; i++)
  matriz[i] = malloc(10 * sizeof(int));

  int i2;
  char **texto = malloc(100 * sizeof(char *));
  if (texto == NULL)
  {
    printf("Falha ao alocar memória.\n");
    free(vetor);
    for (i = 0; i < 10; i++)
      free(matriz[i]);
    free(matriz);
    exit(1);
  }
  for (i2 = 0; i < 100; i++)
    texto[i2] = malloc(80 * sizeof(char));
  
  sProduto *produtos = malloc(50 * sizeof(sProduto));
  if (produtos == NULL)
  {
    printf("Falha ao alocar memória.\n");
    free(vetor);
    for (i = 0; i < 10; i++)
      free(matriz[i]);
    free(matriz);
    for (i = 0; i < 100; i++)
      free(texto[i2]);
    free(texto);
    exit(1);
  }





  free(vetor);

  for (i = 0; i < 10; i++)
    free(matriz[i]);
  free(matriz);

  for (i = 0; i < 100; i++)
    free(texto[i2]);
  free(texto);

  free(produtos);

  return 0;
}

==============

Ex6:

==============

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main(void)
{
  int qtd;
  char **nomes = NULL;

  printf("Menu de nomes:\n");
  printf("[1]. Gravar um nome em uma linha\n");
  printf("[2]. Apagar um nome contido em uma linha\n");
  printf("[3]. Informar um nome, procurar onde esta e se encontrar, trocar por outro\n");
  printf("[4]. Informar um nome, procurar onde esta e se encontrar, apagar\n");
  printf("[5]. Recuperar um nome contido em uma linha\n");
  int opcao;
  printf("Escolha uma opção: ");
  scanf("%d", &opcao);
  if (opcao < 1 || opcao > 5)
  {
    printf("Opção inválida.\n");
    return 1;
  }
  switch (opcao)
  {
    case 1:
      {
        printf("Informe a quantidade de nomes: ");
        scanf("%d", &qtd);
        nomes = malloc(qtd * sizeof(char *));
        if (nomes == NULL)
        {
          printf("Falha ao alocar memória.\n");
          exit(1);
        }
        int i, j;
        for (i = 0; i < qtd; i++)
        {
          nomes[i] = malloc(31 * sizeof(char));
          if (nomes[i] == NULL)
          {
            printf("Falha ao alocar memória.\n");
            for (j = 0; j < i; j++)
              free(nomes[j]);
            free(nomes);
            exit(1);
          }
        } 

        for (i = 0; i < qtd; i++)
        {
          printf("Informe o nome %d: ", i + 1);
          scanf("%s", nomes[i]);
        }
        printf("Nomes gravados com sucesso!\n");

        break;
      }
      case 2:
      {
        if (nomes == NULL || qtd <= 0)
        {
            printf("Nenhum nome foi gravado ainda.\n");
            break;
        }
        printf("Informe o nome a ser apagado: ");
        char nome[31];
        scanf("%s", nome);
        int encontrado = 0;
        for (int i = 0; i < qtd; i++)
        {
          if (strcmp(nomes[i], nome) == 0)
          {
            free(nomes[i]);
            nomes[i] = NULL;
            encontrado = 1;
            printf("Nome '%s' apagado com sucesso!\n", nome);
            break;
          }
        }

        break;
      }
      case 3:
      {
        if (nomes == NULL || qtd <= 0)
        {
            printf("Nenhum nome foi gravado ainda.\n");
            break;
        }
        printf("Informe o nome a ser trocado: ");
        char nomeAntigo[31], nomeNovo[31];
        scanf("%s", nomeAntigo);
        printf("Informe o novo nome: ");
        scanf("%s", nomeNovo);
        int encontrado = 0;
        for (int i = 0; i < qtd; i++)
        {
          if (nomes[i] != NULL && strcmp(nomes[i], nomeAntigo) == 0)
          {
            free(nomes[i]);
            nomes[i] = malloc(31 * sizeof(char));
            if (nomes[i] == NULL)
            {
              printf("Falha ao alocar memória.\n");
              exit(1);
            }
            strcpy(nomes[i], nomeNovo);
            encontrado = 1;
            printf("Nome '%s' trocado por '%s'.\n", nomeAntigo, nomeNovo);
            break;
          }
        }

        break;
      }
      case 4:
      {
        if (nomes == NULL || qtd <= 0)
        {
            printf("Nenhum nome foi gravado ainda.\n");
            break;
        }
        printf("Informe o nome a ser apagado: ");
        char nome[31];
        scanf("%s", nome);
        int encontrado = 0;
        for (int i = 0; i < qtd; i++)
        {
          if (nomes[i] != NULL && strcmp(nomes[i], nome) == 0)
          {
            free(nomes[i]);
            nomes[i] = NULL;
            encontrado = 1;
            printf("Nome '%s' apagado.\n", nome);
            break;
          }
        }
        if (!encontrado)
          printf("Nome '%s' não encontrado.\n", nome);

        break;
      }
      case 5:
      {
        if (nomes == NULL || qtd <= 0)
        {
            printf("Nenhum nome foi gravado ainda.\n");
            break;
        }
        printf("Informe o nome a ser recuperado: ");
        char nome[31];
        scanf("%s", nome);
        int encontrado = 0;
        for (int i = 0; i < qtd; i++)
        {
          if (nomes[i] != NULL && strcmp(nomes[i], nome) == 0)
          {
            printf("Nome '%s' encontrado na linha %d.\n", nome, i + 1);
            encontrado = 1;
            break;
          }
        }
        if (!encontrado)
          printf("Nome '%s' não encontrado.\n", nome);

        break;
      }
  }
  if (nomes != NULL)
  {
    for (int i = 0; i < qtd; i++)
    {
      if (nomes[i] != NULL)
        free(nomes[i]);
    }
    free(nomes);
  }
  return 0;
}


==============

Ex7:

==============

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <string.h>

typedef struct {
    char nome[21];
    float x, y;
} Cidade;

float calcular_distancia(Cidade a, Cidade b);

int main()
{
    int n;

    printf("Quantidade de cidades? ");
    scanf("%d", &n);
    while (getchar() != '\n');

    Cidade* cidades = malloc(n * sizeof(Cidade));
    if (cidades == NULL)
    {
        printf("Erro ao alocar memória.\n");
        exit(1);
    }

    int i;
    for (i = 0; i < n; i++) {
        printf("Nome da cidade %d: ", i);
        fgets(cidades[i].nome, sizeof(cidades[i].nome), stdin);
        cidades[i].nome[strcspn(cidades[i].nome, "\n")] = 0;
        printf("Coordenada X: ");
        scanf("%f", &cidades[i].x);
        printf("Coordenada Y: ");
        scanf("%f", &cidades[i].y);
        while (getchar() != '\n');
    }

    float** distancias = malloc(n * sizeof(float*));
    if (distancias == NULL)
    {
        printf("Erro ao alocar memória para distâncias.\n");
        free(cidades);
        exit(1);
    }
    for (i = 0; i < n; i++)
        distancias[i] = malloc(n * sizeof(float));

    int j;
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < n; j++)
            distancias[i][j] = calcular_distancia(cidades[i], cidades[j]);
    }

    printf("\nMatriz de Distâncias:\n      ");
    for (i = 0; i < n; i++)
        printf("[%d] ", i);
    printf("\n");

    for (i = 0; i < n; i++)
    {
        printf("[%d] ", i);
        for (j = 0; j < n; j++)
            printf("%.2f ", distancias[i][j]);
        printf("\n");
    }

    while (1)
    {
        printf("\nDigite os índices de duas cidades (-1 para sair): ");
        scanf("%d %d", &i, &j);
        if (i == -1 || j == -1)
            break;
        if (i >= 0 && i < n && j >= 0 && j < n)
            printf("Distância entre %s e %s: %.2f\n", cidades[i].nome, cidades[j].nome, distancias[i][j]);
        else
            printf("Índices inválidos!\n");
    }

    for (i = 0; i < n; i++)
        free(distancias[i]);
    free(distancias);
    free(cidades);

    return 0;
}

float calcular_distancia(Cidade a, Cidade b) 
{
    return sqrt((b.x - a.x) * (b.x - a.x) + (b.y - a.y) * (b.y - a.y));
}


==============

Ex8:

==============

#include <stdio.h>
#include <stdlib.h>

void lerMatriz(int linhas, int colunas, int matriz[linhas][colunas]);

int main(void)
{
  int a, b, c, d; 

  printf("Digite o número de linhas e colunas da primeira matriz (linhas colunas): ");
  scanf("%d %d", &a, &b);
  printf("Digite o número de linhas e colunas da segunda matriz (linhas colunas): ");
  scanf("%d %d", &c, &d);

  if (b != c)
  {
    printf("Número de colunas da primeira matriz deve ser igual ao número de linhas da segunda.\n");
    return 1;
  }

  int mat1[a][b], mat2[c][d];
  int matProduto[a][d];

  lerMatriz(a, b, mat1);
  lerMatriz(c, d, mat2);

  for (int i = 0; i < a; i++)
  {
    for (int j = 0; j < d; j++)
      matProduto[i][j] = 0;
  }

  for (int i = 0; i < a; i++)
  {
    for (int j = 0; j < d; j++)
    {
      for (int k = 0; k < b; k++)
        matProduto[i][j] += mat1[i][k] * mat2[k][j];
    }
  }

  printf("Matriz 1:\n");
  for (int i = 0; i < a; i++)
  {
    for (int j = 0; j < b; j++)
      printf("%d ", mat1[i][j]);
    printf("\n");
  }

  printf("Matriz 2:\n");
  for (int i = 0; i < c; i++)
  {
    for (int j = 0; j < d; j++)
      printf("%d ", mat2[i][j]);
    printf("\n");
  }

  printf("Produto das matrizes:\n");
  for (int i = 0; i < a; i++)
  {
    for (int j = 0; j < d; j++)
      printf("%d ", matProduto[i][j]);
    printf("\n");
  }

  return 0;
}

void lerMatriz(int linhas, int colunas, int matriz[linhas][colunas])
{
  for (int linha = 0; linha < linhas; linha++)
  {
    for (int coluna = 0; coluna < colunas; coluna++)
    {
      printf("Digite o elemento [%d][%d]: ", linha + 1, coluna + 1);
      scanf("%d", &matriz[linha][coluna]);
    }
  }
}


==============
